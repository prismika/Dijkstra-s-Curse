Dijkstra's Curse
(Light and Statistics Update)

This iteration of Dijkstra's Curse introduces a grab bag of features that makes the game semi-playable!

New features:
	+Equipping a torch increases the player's light radius!
	+Only blocks in the player's line-of-sight are visible! (See Map::checkLOS in map.cpp for Bresenham's algorithm)
	+Torches glow while sitting on the ground! This helps you find torches by following their glow, and lets you drop torches to illuminate blocks for as long as they are in your line of sight.
	+Item stats are displayed in the inventory and equipment views! No more guessing what helps and what doesn't!
	+Player hp and speed are displayed below the map!
	+Messages now show who you damaged and how much!
	+Non-telepathic monsters aren't telepathic anymore!
	+There's a title screen!!

Installation:
	This game was made to run on Linux and was only tested there. To install, move the directory called .rlg327 to your home directory. Then return to this directory in a command line and run "make". The game should be ready to go. To start, run ./dijkstrasCurse (see "Usage" below).

Usage:
	./dijkstrasCurse
	Flags:
		--monsters
			Displays an atlas of monsters in the game
		--items
			Displays a catalog of items in the game
		--seed x
			Seeds the random number generator with seed x

Controls:
	Use a number pad to move
	i: View inventory
	e: View equipped items
	w: Equip (wear) an item. Press a number to select a slot.
	t: Unequip (take off) an item.
	d: Drop item. Press a number to select a slot.
	x: Destroy item. Press a number to select a slot.
	I: Inspect item. Press a number to select a slot.
	L: Look at creature. Move cursor with number pad and select with 't'.
	q or 'esc': Return to map
	Q: Quit game
Secret Controls (shhh):
	T: Teleport. Move cursor with number pad and select target with 'T'.
	f: Toggle fog of war.

Customization:
	Monster and item specifications are in the .rlg327 folder. Once it is placed in your home directory, feel free to edit the file and customize the gameplay!

Architecture:
	This project has many files, with an architecture consisting of four rough layers:

	Layer 1: 	+dijkstrasCurse (parses CLI)
				+gameTypes (defines controller classes and game modes)

	Layer 2: 	+mapBuilder (generates map)
				+mapPopulator (populates map with NPC's)
				+display (handles output)
				+turnMaster (Discrete event simulator)
				+inputCollector (for reading and cleaning user input)
				

	Layer 3:	+monsterParser (Loads monster blueprints from text file. Defines MonsterBlueprint)
				+itemParser (Loads monster blueprints from text file. Defines ItemBlueprint)
				+map (defines Map type, which handles block and entity locations, as well as interfaces facilitating entity movement)

	Lower Level:+heap (Dr. Sheaffer's heap)
				+mapElements (stores map specs and defines types such as Block, BlockType, DistanceMap, etc.)
				+pathFinder (implements Dijkstra's algorithm and generates distance maps)
				+populationElements (defines types such as Entity (for characters), PC, NPC, Item, etc.)

Credit:
	The heap class and monster descriptions were made by Dr. Jeremy Sheaffer. All other code was written by Brantley Vose.
