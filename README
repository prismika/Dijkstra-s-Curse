Dijkstra's Curse
(Now with inert items!)

This iteration of Dijkstra's Curse populates the dungeon with customized monsters and items. See itemParser.h for the ItemBlueprint class and monsterParser.h for the MonsterBlueprint class. These classes both have "build" methods that serve to instantiate the items/monsters that they describe. The populator (mapPopulator.h) makes use of these new methods to place items and monsters in the dungeon, with frequency based on rarity and "artifact" status. The rendering and technicolor is all handled by the display (display.h).

The semester is coming to an end! Stay strong!

Usage:
./dijkstrasCurse
	Launches the game
Flags:
--monsters
	Displays an atlas of monsters in the game
--items
	Displays a catalog of items in the game
--seed x
	Seeds the random number generator with seed x

Architecture:
	This project has many files, with an architecture consisting of four rough layers:

	Layer 1: 	+dijkstrasCurse (parses CLI)
				+gameTypes (defines controller classes)

	Layer 2: 	+mapBuilder (generates map)
				+mapPopulator (populates map with NPC's)
				+display (handles output)
				+turnMaster (Discrete event simulator)
				+inputCollector (for reading and cleaning user input)
				

	Layer 3:	+monsterParser (Loads monster blueprints from text file. Defines MonsterBlueprint)
				+itemParser (Loads monster blueprints from text file. Defines ItemBlueprint)
				+map (defines Map type, which handles block and entity locations, as well as interfaces facilitating entity movement)

	Lower Level:+heap (Dr. Sheaffer's heap)
				+mapElements (stores map specs and defines types such as Block, BlockType, DistanceMap, etc.)
				+pathFinder (implements Dijkstra's algorithm and generates distance maps)
				+populationElements (defines types for characters such as Entity, etc.)
